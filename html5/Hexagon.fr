
package spellbook.Hexagon where

type Width = Long
type Index = Long

up :: Width -> Index -> Index
up = flip (-)

leftUp :: Width -> Index -> Index
leftUp width idx =
  flip (-) 1 (if idx `mod` 2 == 0 then
                idx
              else
                up width idx)

rightUp :: Width -> Index -> Index
rightUp width idx =
  (+1) (if idx `mod` 2 == 0 then
          idx
        else
          up width idx)

down :: Width -> Index -> Index
down = flip (+)

leftDown :: Width -> Index -> Index
leftDown width idx =
  flip (-) 1 (if idx `mod` 2 == 0 then
                down width idx
              else
                idx)

rightDown :: Width -> Index -> Index
rightDown width idx =
  (+1) (if idx `mod` 2 == 0 then
          down width idx
        else
          idx)

nearby_ :: Width -> Index -> [Index]
nearby_ width idx =
  map (\f -> f width idx) [leftUp, up, rightUp, rightDown, down, leftDown]

nearby width = arrayFromList . (nearby_ width)
