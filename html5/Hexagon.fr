
package spellbook.Hexagon where

type Width = Long
type Index = Long

up :: Index -> Width -> Index
up = (-)

leftUp :: Index -> Width -> Index
leftUp idx width =
  (if idx `mod` 2 == 0 then
     idx
   else
     up idx width) - 1

rightUp :: Index -> Width -> Index
rightUp idx width =
  (if idx `mod` 2 == 0 then
     idx
   else
     up idx width) + 1

down :: Index -> Width -> Index
down = (+)

leftDown :: Index -> Width -> Index
leftDown idx width =
  (if idx `mod` 2 == 0 then
     down idx width
   else
     idx) - 1

rightDown :: Index -> Width -> Index
rightDown idx width =
  (if idx `mod` 2 == 0 then
     down idx width
   else
     idx) + 1

nearby_ :: Width -> Index -> [Index]
nearby_ idx width =
  map (\f -> f idx width) [leftUp, up, rightUp, rightDown, down, leftDown]

nearby width = arrayFromList . (nearby_ width)
